import{_ as l,c as p,e as o,b as t,a as s,d as a,w as i,r as d,o as m}from"./app-DV78zg5I.js";const c="/cps-design-system/assets/responsive-design-Df4V8o_l.png",u="/cps-design-system/assets/rounded-corners-C2Vf1zEE.png",g={};function v(f,e){const r=d("SpacingScale"),n=d("RouteLink");return m(),p("div",null,[e[7]||(e[7]=o('<h1 id="dimensoes-e-espacamentos" tabindex="-1"><a class="header-anchor" href="#dimensoes-e-espacamentos"><span>Dimensões e Espaçamentos</span></a></h1><p>Usar a combinação apropriada de dimensões e espaçamentos, de forma padronizada ao longo de uma aplicação, proporciona uma experiência do usuário mais apropriada aos requisitos de funcionalidade e interação, além de evidentemente transmitir uma sensação de maior profissionalismo em relação à construção da interface.</p><h2 id="ajustes-para-responsividade" tabindex="-1"><a class="header-anchor" href="#ajustes-para-responsividade"><span>Ajustes para Responsividade</span></a></h2><p>Aplicações <em>web</em> podem ser executadas em qualquer dispositivo que suporte executar um navegador, o que atualmente inclui <em>smartphones</em>, <em>tablets</em>, <em>laptops</em>, computadores de mesa convencionais, TVs e muito mais. Interfaces modernas precisam ser planejadas desde o princípio para que se encaixem bem em dispositivos com telas pequenas, e então que se expandam naturalmente tirando vantagem de telas maiores. Esta abordagem é conhecida como <strong>design responsivo iniciando em dispositivos móveis</strong> (<em>mobile first responsive design</em>) e, embora não seja uma abordagem unânime, é provavelmente a mais utilizada e é altamente recomendada por este <em>design system</em>.</p><div class="hint-container tip"><p class="hint-container-title">Dicas</p><p>Ao projetar pontos de quebra, considere a quantidade de espaço efetivamente disponível dentro do aplicativo, não o tamanho da tela em si. Quando o aplicativo é executado em tela inteira, a janela do aplicativo tem o mesmo tamanho da tela, mas quando não está em tela inteira, a janela é eventualmente menor. Considerando-se a execução dentro de um navegador <em>web</em>, o que importa é a área disponível para visualização (<em>viewport</em>).</p></div><p>Com um grande número de dispositivo e tamanhos de tela variados, em vez de tentar otimizar a interface para cada dispositivo, é mais recomendável projetar para algumas categorias de largura de chave (também chamadas de &quot;pontos de quebra&quot;, ou <em>breakpoints</em>). As classificações mais convencionais costumam abordar três pontos chave: <strong>Pequenos</strong> (até <code>640px</code>), <strong>Médios</strong> (entre <code>641px</code> e <code>1023px</code>) e <strong>Grandes</strong> (a partir de <code>1024px</code>).</p><p><img src="'+c+`" alt="Responsividade" loading="lazy"></p><h3 id="pontos-de-quebra" tabindex="-1"><a class="header-anchor" href="#pontos-de-quebra"><span>Pontos de Quebra</span></a></h3><p>Trabalhar com apenas três pontos de quebra pode ser inconvenientemente limitado. Uma vez que a abordagem <em>mobile first</em> seja utilizada, é conveniente começar projetando para as menores telas disponíveis (em geral, <em>smartphones</em> antigos com <em>viewport</em> faixa de <code>320px</code> de largura) e se apoiar em pontos de quebra para cada dimensão superior relevante, permitindo ajustar os elementos conforme mais espaço é disponibilizado.</p><p>Com isto em mente, o <strong>CPS Design System</strong> se respalda em seis pontos de quebra, ou seja, deriva um sub-nível dentro de cada ponto de quebra comumente utilizado, conforme esta tabela:</p><table><thead><tr><th style="text-align:left;">Nome</th><th style="text-align:left;">Largura mínima</th><th style="text-align:left;">CSS</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>xs</strong></td><td style="text-align:left;"><code>380px</code></td><td style="text-align:left;"><code>@media (min-width: 380px) { ... }</code></td></tr><tr><td style="text-align:left;"><strong>sm</strong></td><td style="text-align:left;"><code>640px</code></td><td style="text-align:left;"><code>@media (min-width: 640px) { ... }</code></td></tr><tr><td style="text-align:left;"><strong>md</strong></td><td style="text-align:left;"><code>768px</code></td><td style="text-align:left;"><code>@media (min-width: 768px) { ... }</code></td></tr><tr><td style="text-align:left;"><strong>lg</strong></td><td style="text-align:left;"><code>1024px</code></td><td style="text-align:left;"><code>@media (min-width: 1024px) { ... }</code></td></tr><tr><td style="text-align:left;"><strong>xl</strong></td><td style="text-align:left;"><code>1280px</code></td><td style="text-align:left;"><code>@media (min-width: 1280px) { ... }</code></td></tr><tr><td style="text-align:left;"><strong>2xl</strong></td><td style="text-align:left;"><code>1536px</code></td><td style="text-align:left;"><code>@media (min-width: 1536px) { ... }</code></td></tr></tbody></table><p>Com tais definições, fica simples construir os elementos da interface pensando-se nas telas menores, bastante não utilizar nenhum ponto de quebra, e depois ajustar tais elementos apenas com os atributos que precisarem ser modificados em telas maiores, por exemplo:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.fluid-container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> col<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">gap</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">.fluid-container</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Como aplicar corretamente a responsividade?</summary><p>Conhecer <em>breakpoints</em> ou mesmo saber como aplicar a filosofia do <em>mobile first</em> não é o suficiente para construir aplicações com responsividade incrível, pois isto exige muito estudo e boa percepção de usabilidade.</p><p>Um bom ponto de partida é este excelente material sobre <a href="https://docs.microsoft.com/pt-br/windows/apps/design/layout/responsive-design" target="_blank" rel="noopener noreferrer">Técnicas de Design Responsivo</a>, encontrado na documentação de <em>design</em> do Fluent para Windows 11, cheio de explicações e de imagens em movimento demonstrando boas práticas de responsividade, na prática.</p></details><h2 id="padronizacao-de-medidas" tabindex="-1"><a class="header-anchor" href="#padronizacao-de-medidas"><span>Padronização de Medidas</span></a></h2><p>Neste <em>design system</em>, os tamanhos, margens, espaçamentos e posições dos elementos na interface são construídos a partir da medida de fonte padrão do navegador <em>web</em>, o <code>rem</code>. Consideração a configuração padrão, <code>1rem</code> equivale a <code>16px</code>, porém com a vantagem de ser flexível a configurações personalizadas realizadas por usuários com necessidades específicas.</p><p>A partir disto, a tabela de padronização de espaçamentos se utiliza de dividendos e múltiplos de <code>2</code> a partir do tamanho padrão, obtendo-se a seguinte escala:</p>`,17)),t(r),e[8]||(e[8]=s("p",null,[a("Repare que apenas o valor especial "),s("code",null,"px"),a(" não segue a ideia dos dividendos e múltiplos de "),s("code",null,"2"),a(", uma vez que há diversos cenários em interfaces grandes onde "),s("code",null,"1px"),a(" é uma dimensão viável (como bordas de elementos, separadores de seções, e ajustes finos de posicionamento de ícones).")],-1)),e[9]||(e[9]=s("h2",{id:"cantos-arredondados",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#cantos-arredondados"},[s("span",null,"Cantos Arredondados")])],-1)),s("p",null,[e[2]||(e[2]=a("Em um sentido mais primordial, interfaces gráficas são apenas conjuntos de blocos, quadrados e retângulos espalhados ao longo da tela no intuito de trazer diferentes significados a partir da utilização de outras características, como ",-1)),t(n,{to:"/guia-visual/elevacao.html"},{default:i(()=>e[0]||(e[0]=[a("Elevação",-1)])),_:1,__:[0]}),e[3]||(e[3]=a(" e ",-1)),t(n,{to:"/guia-visual/cores.html"},{default:i(()=>e[1]||(e[1]=[a("Cores",-1)])),_:1,__:[1]}),e[4]||(e[4]=a(". Entretanto, a própria geometria pode ajudar diferenciar um pouco os elementos. Com isso, ajuda-se a criar experiências que parecerem coerentes em todo o ",-1)),e[5]||(e[5]=s("em",null,"design system",-1)),e[6]||(e[6]=a(".",-1))]),e[10]||(e[10]=o('<p><img src="'+u+'" alt="Exemplo de Cantos Arredondados" loading="lazy"></p><p>No <strong>CPS Design System</strong>, a geometria foi pensada para dar suporte a experiências modernas, através de cantos arredondados progressivamente, elementos aninhados e medianizes consistentes que se combinam para criar um efeito suave, sutil e acessível, enfatizando a finalidade e a facilidade de uso, conforme esta tabela:</p><table><thead><tr><th style="text-align:left;">Nome</th><th style="text-align:left;">Medida</th><th style="text-align:left;">Uso</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>0</strong></td><td style="text-align:left;"><code>0px</code></td><td style="text-align:left;">Cantos retos são comuns quando elementos se interseccionam, ainda que estes possuam cantos arredondados nas extremidades opostas.</td></tr><tr><td style="text-align:left;"><strong>sm</strong></td><td style="text-align:left;"><code>2px</code></td><td style="text-align:left;">Utilizado em elementos de entrada de dados, como caixas de texto e caixas de seleção.</td></tr><tr><td style="text-align:left;"><strong>md</strong></td><td style="text-align:left;"><code>4px</code></td><td style="text-align:left;">Utilizado em elementos acionáveis da interface, como botões e items de listas de seleção.</td></tr><tr><td style="text-align:left;"><strong>lg</strong></td><td style="text-align:left;"><code>8px</code></td><td style="text-align:left;">Utilizado em todos os contêineres de nível superior, como nas diferentes camadas base, nos painéis, nos cartões, nas caixas de diálogo, etc.</td></tr><tr><td style="text-align:left;"><strong>full</strong></td><td style="text-align:left;"><code>50%</code></td><td style="text-align:left;">Arredondamento percentual ao tamanho de cada canto do elemento, transformando-o de retangular para circular, usado comumente em <em>avatares</em> e rótulos indicativos.</td></tr></tbody></table>',3))])}const b=l(g,[["render",v]]),y=JSON.parse('{"path":"/guia-visual/dimensoes-e-espacamentos.html","title":"Dimensões e Espaçamentos","lang":"pt-BR","frontmatter":{},"filePathRelative":"guia-visual/dimensoes-e-espacamentos.md"}');export{b as comp,y as data};
